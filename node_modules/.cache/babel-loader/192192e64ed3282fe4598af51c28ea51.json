{"ast":null,"code":"var _jsxFileName = \"/Users/daria/Documents/ADC-Generative-Art-Boilerplate-2023/app/javascript/prototypes/prototype_15/Container.jsx\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport * as Tone from 'tone';\nimport React, { Component } from 'react';\nimport * as bassSettings from './tunes/bass.js';\nimport * as melodySettings from './tunes/melody.js'; // import * as drumsSettings from './tunes/drums.js'\n\nimport ToneSynth from './modules/ToneSynth.jsx';\nimport Channel from './modules/Channel.jsx';\nimport SC_Button from './components/SC_Button';\nimport SC_Slider from './components/SC_Slider';\nvar bassSynth;\nvar bassChorus;\nvar bassPingPongDelay;\nvar melodySynth;\nvar melodyChorus;\nvar melodyPingPongDelay;\nvar samplerChannel;\n\nvar Container = /*#__PURE__*/function (_Component) {\n  _inherits(Container, _Component);\n\n  var _super = _createSuper(Container);\n\n  function Container(props) {\n    var _this;\n\n    _classCallCheck(this, Container);\n\n    _this = _super.call(this, props);\n\n    _this.handleStart = function () {\n      var _this$state = _this.state,\n          bassSettings = _this$state.bassSettings,\n          melodySettings = _this$state.melodySettings; //\n      //\n\n      bassSynth = new Tone.Synth(bassSettings.synth);\n      bassChorus = new Tone.Chorus(bassSettings.chorus).start();\n      bassPingPongDelay = new Tone.PingPongDelay(bassSettings.pingPongDelay).toDestination();\n      bassSynth.chain(bassChorus, bassPingPongDelay);\n      var bassPart = new Tone.Part(function (time, note) {\n        bassSynth.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, bassSettings.sequence.steps).start(0);\n      bassPart.loopEnd = bassSettings.sequence.duration;\n      bassPart.loop = true; //\n      //\n\n      melodySynth = new Tone.Synth(melodySettings.synth);\n      melodyChorus = new Tone.Chorus(melodySettings.chorus).start();\n      melodyDistortion = new Tone.Synth(melodySettings.distortion);\n      melodyPingPongDelay = new Tone.PingPongDelay(melodySettings.pingPongDelay).toDestination();\n      melodySynth.chain(melodyChorus, melodyPingPongDelay);\n      var melodyPart = new Tone.Part(function (time, note) {\n        melodySynth.triggerAttackRelease(note.noteName, note.duration, time, note.velocity);\n      }, melodySettings.sequence.steps).start(0);\n      melodyPart.loopEnd = melodySettings.sequence.duration;\n      melodyPart.loop = true; //\n      //\n      // const sampler = new Tone.Sampler({\n      //   urls: {\n      //     A1: '00001-Linn-9000-BassDrumrum1.mp3',\n      //     A2: '00017-Linn-9000-Snare.mp3'\n      //   },\n      //   baseUrl: 'http://localhost:3000/samples/'\n      //   // onload: () => {\n      //   //   sampler.triggerAttackRelease(['A1', 'A2', 'A1', 'A2'], 0.5)\n      //   // }\n      // })\n      //\n      // samplerChannel = new Tone.Channel(drumsSettings.channel).toDestination()\n      //\n      // sampler.chain(samplerChannel)\n      //\n      // const drumsPart = new Tone.Part((time, note) => {\n      //   sampler.triggerAttackRelease(\n      //     note.noteName,\n      //     note.duration,\n      //     time,\n      //     note.velocity\n      //   )\n      // }, drumsSettings.sequence.steps).start(0)\n      //\n      // drumsPart.loopEnd = drumsSettings.sequence.duration\n      // drumsPart.loop = true\n\n      Tone.Transport.start();\n    };\n\n    _this.handleBassValueChange = function (property, value) {\n      var bassSettings = _this.state.bassSettings;\n\n      if (property === 'synthType') {\n        bassSynth.oscillator.type = value;\n        bassSettings.synth.oscillator.type = value;\n      } else if (property === 'synthEnvelopeAttack') {\n        bassSynth.envelope.attack = value;\n        bassSettings.synth.envelope.attack = value;\n      } else if (property === 'synthEnvelopeDecay') {\n        bassSynth.envelope.decay = value;\n        bassSettings.synth.envelope.decay = value;\n      } else if (property === 'synthEnvelopeSustain') {\n        bassSynth.envelope.sustain = value;\n        bassSettings.synth.envelope.sustain = value;\n      } else if (property === 'synthEnvelopeRelease') {\n        bassSynth.envelope.release = value;\n        bassSettings.synth.envelope.release = value;\n      } else if (property === 'pingPongDelayWet') {\n        bassPingPongDelay.wet.value = value;\n        bassSettings.pingPongDelay.wet = value;\n      } else if (property === 'chorusWet') {\n        bassChorus.wet.value = value;\n        bassSettings.chorus.wet = value;\n      }\n\n      _this.setState({\n        bassSettings: bassSettings\n      });\n    };\n\n    _this.handleMelodyValueChange = function (property, value) {\n      var melodySettings = _this.state.melodySettings;\n\n      if (property === 'synthType') {\n        melodySynth.oscillator.type = value;\n        melodySettings.synth.oscillator.type = value;\n      } else if (property === 'synthEnvelopeAttack') {\n        melodySynth.envelope.attack = value;\n        melodySettings.synth.envelope.attack = value;\n      } else if (property === 'synthEnvelopeDecay') {\n        melodySynth.envelope.decay = value;\n        melodySettings.synth.envelope.decay = value;\n      } else if (property === 'synthEnvelopeSustain') {\n        melodySynth.envelope.sustain = value;\n        melodySettings.synth.envelope.sustain = value;\n      } else if (property === 'synthEnvelopeRelease') {\n        melodySynth.envelope.release = value;\n        melodySettings.synth.envelope.release = value;\n      } else if (property === 'pingPongDelayWet') {\n        melodyPingPongDelay.wet.value = value;\n        melodySettings.pingPongDelay.wet = value;\n      } else if (property === 'pingPongDelayDelay') {\n        melodyPingPongDelay.delayTime.value = value;\n        melodySettings.pingPongDelay.delayTime = value;\n      } else if (property === 'chorusWet') {\n        melodyChorus.wet.value = value;\n        melodySettings.chorus.wet = value;\n      } else if (property === 'chorusFrequency') {\n        melodyChorus.frecuency = value;\n        melodySettings.chorus.frequency = value;\n      } else if (property === 'chorusSpread') {\n        melodyChorus.spread = value;\n        melodySettings.chorus.spread = value;\n      } else if (property === 'distortionWet') {\n        melodyDistortion.wet.value = value;\n        melodySettings.distortion.wet = value;\n      }\n\n      _this.setState({\n        melodySettings: melodySettings\n      });\n    };\n\n    _this.state = {\n      bassSettings: bassSettings,\n      melodySettings: melodySettings\n    };\n    return _this;\n  }\n\n  _createClass(Container, [{\n    key: \"render\",\n    value: // handleDrumsValueChange = (property, value) => {\n    //   const { drumsSettings } = this.state\n    //\n    //   if (property === 'channelVolume') {\n    //     samplerChannel.volume.value = value\n    //     drumsSettings.channel.volume = value\n    //   } else if (property === 'channelMute') {\n    //     samplerChannel.mute = value\n    //     drumsSettings.channel.mute = value\n    //   }\n    //\n    //   this.setState({\n    //     drumsSettings\n    //   })\n    // }\n    function render() {\n      var _this$state2 = this.state,\n          melodySettings = _this$state2.melodySettings,\n          bassSettings = _this$state2.bassSettings;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(SC_Button, {\n        text: \"play\",\n        handleClick: this.handleStart,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Synth\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Left\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"SynthName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 15\n        }\n      }, \"Vitamin\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 24\n        }\n      }), \"synth\")), /*#__PURE__*/React.createElement(ToneSynth, {\n        settings: melodySettings,\n        handleValueChange: this.handleMelodyValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"PingPong\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 15\n        }\n      }, \"Ping Pong\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 26\n        }\n      }), \"delay\"), /*#__PURE__*/React.createElement(SC_Slider, {\n        name: \"Wet\",\n        min: 0,\n        max: 1,\n        step: 0.01,\n        value: melodySettings.pingPongDelay.wet,\n        property: \"pingPongDelayWet\",\n        handleChange: this.handleMelodyValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(SC_Slider, {\n        name: \"Delay\",\n        min: 0,\n        max: 1,\n        step: 0.01,\n        value: melodySettings.pingPongDelay.delayTime,\n        property: \"pingPongDelayDelay\",\n        handleChange: this.handleMelodyValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Chorus\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 15\n        }\n      }, \"Chorus\"), /*#__PURE__*/React.createElement(SC_Slider, {\n        name: \"Wet\",\n        min: 0,\n        max: 1,\n        step: 0.01,\n        value: melodySettings.chorus.wet,\n        property: \"chorusWet\",\n        handleChange: this.handleMelodyValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(SC_Slider, {\n        name: \"Frequency\",\n        min: 0,\n        max: 100,\n        step: 0.01,\n        value: melodySettings.chorus.frequency,\n        property: \"chorusFrequency\",\n        handleChange: this.handleMelodyValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(SC_Slider, {\n        name: \"Spread\",\n        min: 0,\n        max: 360,\n        step: 1,\n        value: melodySettings.chorus.spread,\n        property: \"chorusSpread\",\n        handleChange: this.handleMelodyValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Distortion\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 15\n        }\n      }, \"Distortion\"), /*#__PURE__*/React.createElement(SC_Slider, {\n        name: \"Wet\",\n        min: 0,\n        max: 1,\n        step: 0.01,\n        value: melodySettings.pingPongDelay.wet,\n        property: \"distortionWet\",\n        handleChange: this.handleMelodyValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 15\n        }\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"Right\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"SynthName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 15\n        }\n      }, \"Mineral\", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 24\n        }\n      }), \"synth\")), /*#__PURE__*/React.createElement(ToneSynth, {\n        settings: bassSettings,\n        handleValueChange: this.handleBassValueChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return Container;\n}(Component);\n\nexport { Container as default };","map":{"version":3,"names":["Tone","React","Component","bassSettings","melodySettings","ToneSynth","Channel","SC_Button","SC_Slider","bassSynth","bassChorus","bassPingPongDelay","melodySynth","melodyChorus","melodyPingPongDelay","samplerChannel","Container","props","handleStart","state","Synth","synth","Chorus","chorus","start","PingPongDelay","pingPongDelay","toDestination","chain","bassPart","Part","time","note","triggerAttackRelease","noteName","duration","velocity","sequence","steps","loopEnd","loop","melodyDistortion","distortion","melodyPart","Transport","handleBassValueChange","property","value","oscillator","type","envelope","attack","decay","sustain","release","wet","setState","handleMelodyValueChange","delayTime","frecuency","frequency","spread"],"sources":["/Users/daria/Documents/ADC-Generative-Art-Boilerplate-2023/app/javascript/prototypes/prototype_15/Container.jsx"],"sourcesContent":["import * as Tone from 'tone'\nimport React, { Component } from 'react'\n\nimport * as bassSettings from './tunes/bass.js'\nimport * as melodySettings from './tunes/melody.js'\n// import * as drumsSettings from './tunes/drums.js'\n\nimport ToneSynth from './modules/ToneSynth.jsx'\nimport Channel from './modules/Channel.jsx'\n\nimport SC_Button from './components/SC_Button'\nimport SC_Slider from './components/SC_Slider'\n\nlet bassSynth\nlet bassChorus\nlet bassPingPongDelay\n\nlet melodySynth\nlet melodyChorus\nlet melodyPingPongDelay\n\nlet samplerChannel\n\nexport default class Container extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      bassSettings,\n      melodySettings\n    }\n  }\n\n  handleStart = () => {\n    const { bassSettings, melodySettings } = this.state\n\n    //\n    //\n    bassSynth = new Tone.Synth(bassSettings.synth)\n    bassChorus = new Tone.Chorus(bassSettings.chorus).start()\n\n    bassPingPongDelay = new Tone.PingPongDelay(\n      bassSettings.pingPongDelay\n    ).toDestination()\n\n    bassSynth.chain(bassChorus, bassPingPongDelay)\n\n    const bassPart = new Tone.Part((time, note) => {\n      bassSynth.triggerAttackRelease(\n        note.noteName,\n        note.duration,\n        time,\n        note.velocity\n      )\n    }, bassSettings.sequence.steps).start(0)\n\n    bassPart.loopEnd = bassSettings.sequence.duration\n    bassPart.loop = true\n    //\n    //\n    melodySynth = new Tone.Synth(melodySettings.synth)\n    melodyChorus = new Tone.Chorus(melodySettings.chorus).start()\n    melodyDistortion = new Tone.Synth(melodySettings.distortion)\n\n    melodyPingPongDelay = new Tone.PingPongDelay(\n      melodySettings.pingPongDelay\n    ).toDestination()\n\n    melodySynth.chain(melodyChorus, melodyPingPongDelay)\n\n    const melodyPart = new Tone.Part((time, note) => {\n      melodySynth.triggerAttackRelease(\n        note.noteName,\n        note.duration,\n        time,\n        note.velocity\n      )\n    }, melodySettings.sequence.steps).start(0)\n\n    melodyPart.loopEnd = melodySettings.sequence.duration\n    melodyPart.loop = true\n    //\n    //\n    // const sampler = new Tone.Sampler({\n    //   urls: {\n    //     A1: '00001-Linn-9000-BassDrumrum1.mp3',\n    //     A2: '00017-Linn-9000-Snare.mp3'\n    //   },\n    //   baseUrl: 'http://localhost:3000/samples/'\n    //   // onload: () => {\n    //   //   sampler.triggerAttackRelease(['A1', 'A2', 'A1', 'A2'], 0.5)\n    //   // }\n    // })\n    //\n    // samplerChannel = new Tone.Channel(drumsSettings.channel).toDestination()\n    //\n    // sampler.chain(samplerChannel)\n    //\n    // const drumsPart = new Tone.Part((time, note) => {\n    //   sampler.triggerAttackRelease(\n    //     note.noteName,\n    //     note.duration,\n    //     time,\n    //     note.velocity\n    //   )\n    // }, drumsSettings.sequence.steps).start(0)\n    //\n    // drumsPart.loopEnd = drumsSettings.sequence.duration\n    // drumsPart.loop = true\n\n    Tone.Transport.start()\n  }\n\n  handleBassValueChange = (property, value) => {\n    const { bassSettings } = this.state\n\n    if (property === 'synthType') {\n      bassSynth.oscillator.type = value\n      bassSettings.synth.oscillator.type = value\n    } else if (property === 'synthEnvelopeAttack') {\n      bassSynth.envelope.attack = value\n      bassSettings.synth.envelope.attack = value\n    } else if (property === 'synthEnvelopeDecay') {\n      bassSynth.envelope.decay = value\n      bassSettings.synth.envelope.decay = value\n    } else if (property === 'synthEnvelopeSustain') {\n      bassSynth.envelope.sustain = value\n      bassSettings.synth.envelope.sustain = value\n    } else if (property === 'synthEnvelopeRelease') {\n      bassSynth.envelope.release = value\n      bassSettings.synth.envelope.release = value\n    } else if (property === 'pingPongDelayWet') {\n      bassPingPongDelay.wet.value = value\n      bassSettings.pingPongDelay.wet = value\n    } else if (property === 'chorusWet') {\n      bassChorus.wet.value = value\n      bassSettings.chorus.wet = value\n    }\n\n    this.setState({\n      bassSettings\n    })\n  }\n\n  handleMelodyValueChange = (property, value) => {\n    const { melodySettings } = this.state\n\n    if (property === 'synthType') {\n      melodySynth.oscillator.type = value\n      melodySettings.synth.oscillator.type = value\n    } else if (property === 'synthEnvelopeAttack') {\n      melodySynth.envelope.attack = value\n      melodySettings.synth.envelope.attack = value\n    } else if (property === 'synthEnvelopeDecay') {\n      melodySynth.envelope.decay = value\n      melodySettings.synth.envelope.decay = value\n    } else if (property === 'synthEnvelopeSustain') {\n      melodySynth.envelope.sustain = value\n      melodySettings.synth.envelope.sustain = value\n    } else if (property === 'synthEnvelopeRelease') {\n      melodySynth.envelope.release = value\n      melodySettings.synth.envelope.release = value\n    } else if (property === 'pingPongDelayWet') {\n      melodyPingPongDelay.wet.value = value\n      melodySettings.pingPongDelay.wet = value\n    } else if (property === 'pingPongDelayDelay') {\n      melodyPingPongDelay.delayTime.value = value\n      melodySettings.pingPongDelay.delayTime = value\n    } else if (property === 'chorusWet') {\n      melodyChorus.wet.value = value\n      melodySettings.chorus.wet = value\n    } else if (property === 'chorusFrequency') {\n      melodyChorus.frecuency = value\n      melodySettings.chorus.frequency = value\n    } else if (property === 'chorusSpread') {\n      melodyChorus.spread = value\n      melodySettings.chorus.spread = value\n    } else if (property === 'distortionWet') {\n      melodyDistortion.wet.value = value\n      melodySettings.distortion.wet = value\n    }\n\n    this.setState({\n      melodySettings\n    })\n  }\n\n  // handleDrumsValueChange = (property, value) => {\n  //   const { drumsSettings } = this.state\n  //\n  //   if (property === 'channelVolume') {\n  //     samplerChannel.volume.value = value\n  //     drumsSettings.channel.volume = value\n  //   } else if (property === 'channelMute') {\n  //     samplerChannel.mute = value\n  //     drumsSettings.channel.mute = value\n  //   }\n  //\n  //   this.setState({\n  //     drumsSettings\n  //   })\n  // }\n\n  render() {\n    const { melodySettings, bassSettings } = this.state\n\n    return (\n      <div className=\"Container\">\n        <div className=\"Header\">\n          <SC_Button text=\"play\" handleClick={this.handleStart} />\n        </div>\n        <div className=\"Synth\">\n          <div className=\"Left\">\n            <div className=\"SynthName\">\n              <h1>\n                Vitamin<br></br>synth\n              </h1>\n            </div>\n            <ToneSynth\n              settings={melodySettings}\n              handleValueChange={this.handleMelodyValueChange}\n            />\n            <div className=\"PingPong\">\n              <h3>\n                Ping Pong<br></br>delay\n              </h3>\n              <SC_Slider\n                name=\"Wet\"\n                min={0}\n                max={1}\n                step={0.01}\n                value={melodySettings.pingPongDelay.wet}\n                property=\"pingPongDelayWet\"\n                handleChange={this.handleMelodyValueChange}\n              />\n              <SC_Slider\n                name=\"Delay\"\n                min={0}\n                max={1}\n                step={0.01}\n                value={melodySettings.pingPongDelay.delayTime}\n                property=\"pingPongDelayDelay\"\n                handleChange={this.handleMelodyValueChange}\n              />\n            </div>\n            <div className=\"Chorus\">\n              <h3>Chorus</h3>\n              <SC_Slider\n                name=\"Wet\"\n                min={0}\n                max={1}\n                step={0.01}\n                value={melodySettings.chorus.wet}\n                property=\"chorusWet\"\n                handleChange={this.handleMelodyValueChange}\n              />\n              <SC_Slider\n                name=\"Frequency\"\n                min={0}\n                max={100}\n                step={0.01}\n                value={melodySettings.chorus.frequency}\n                property=\"chorusFrequency\"\n                handleChange={this.handleMelodyValueChange}\n              />\n              <SC_Slider\n                name=\"Spread\"\n                min={0}\n                max={360}\n                step={1}\n                value={melodySettings.chorus.spread}\n                property=\"chorusSpread\"\n                handleChange={this.handleMelodyValueChange}\n              />\n            </div>\n            <div className=\"Distortion\">\n              <h3>Distortion</h3>\n              <SC_Slider\n                name=\"Wet\"\n                min={0}\n                max={1}\n                step={0.01}\n                value={melodySettings.pingPongDelay.wet}\n                property=\"distortionWet\"\n                handleChange={this.handleMelodyValueChange}\n              />\n            </div>\n          </div>\n\n          <div className=\"Right\">\n            <div className=\"SynthName\">\n              <h1>\n                Mineral<br></br>synth\n              </h1>\n            </div>\n            <ToneSynth\n              settings={bassSettings}\n              handleValueChange={this.handleBassValueChange}\n            />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}